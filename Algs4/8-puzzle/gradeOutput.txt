# graderOutput


See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Checkstyle:   FAILED (17 warnings)
Findbugs:     PASSED
API:          PASSED

Correctness:  36/42 tests passed
Memory:       11/11 tests passed
Timing:       12/17 tests passed

Aggregate score: 83.36% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
8.9K Jan  4 02:27 Board.java
6.6K Jan  4 02:27 Solver.java
4.3K Jan  4 02:27 studentSubmission.zip


********************************************************************************
*  COMPILING                                                                   *
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
Solver.java:61:13: Use the primitive type 'int' instead of the wrapper type 'Integer'. [IllegalType]
Solver.java:61:35: Typecast is not followed by whitespace. [WhitespaceAfter]
Solver.java:62:13: Use the primitive type 'int' instead of the wrapper type 'Integer'. [IllegalType]
Solver.java:62:35: Typecast is not followed by whitespace. [WhitespaceAfter]
Solver.java:70:13: Use the primitive type 'int' instead of the wrapper type 'Integer'. [IllegalType]
Solver.java:70:35: Typecast is not followed by whitespace. [WhitespaceAfter]
Solver.java:71:13: Use the primitive type 'int' instead of the wrapper type 'Integer'. [IllegalType]
Solver.java:71:35: Typecast is not followed by whitespace. [WhitespaceAfter]
Solver.java:83:55: ',' is not followed by whitespace. [WhitespaceAfter]
Solver.java:109:16: 'for' is not followed by whitespace. [WhitespaceAround]
Solver.java:109:53: '{' is not preceded with whitespace. [WhitespaceAround]
Solver.java:111:47: '{' is not preceded with whitespace. [WhitespaceAround]
Solver.java:117:28: '{' is not preceded with whitespace. [WhitespaceAround]
Solver.java:125:16: 'for' is not followed by whitespace. [WhitespaceAround]
Solver.java:125:57: '{' is not preceded with whitespace. [WhitespaceAround]
Solver.java:127:51: '{' is not preceded with whitespace. [WhitespaceAround]
Solver.java:172:32: '{' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 17 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  TESTING CORRECTNESS
******************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 1b: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 2a: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 2b: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 3: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==> passed

Test 4a: Test toString() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 4b: Test toString() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 5a: Test neighbors() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 5b: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 6a: Test neighbors() of neigbors() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 6b: Test neighbors() of neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 7a: Test twin() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 7b: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 8a: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==> passed

Test 8b: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==> passed

Test 9: Check whether two Board objects can be created at the same time
  *   random 3-by-3 and 3-by-3 boards
  *   random 4-by-4 and 4-by-4 boards
  *   random 2-by-2 and 2-by-2 boards
  *   random 3-by-3 and 4-by-4 boards
  *   random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==> passed

Test 10b: Test equals() on M-by-M vs. N-by-N goal boards
  *  M = 2, N = 2
  *  M = 3, N = 3
  *  M = 4, N = 4
  *  M = 2, N = 5
  *  M = 5, N = 2
==> passed

Test 11: Check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
  *  puzzle20.txt
  *  puzzle30.txt
  *  2-by-2
  *  3-by-3
  *  4-by-4
==> passed

Test 13: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 22/22 tests passed!


================================================================
******************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
******************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 20 total tests.

Test 1: Call moves() with file inputs
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==> passed

Test 2: Call solution() with file inputs
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==> passed

Test 3: Create two Solver objects at the same time
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==> passed

Test 4a: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 4b: Call isSolvable() on random n-by-n boards
  *  100 random 2-by-2 boards
==> passed

Test 5: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 6: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 7a: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-10.txt
  *  random 2-by-2 solvable boards
==> passed

Test 7b: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
  *  random 2-by-2 unsolvable boards
     java.util.NoSuchElementException: Priority queue underflow

     edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:173)
     Solver.solve(Solver.java:122)
     Solver.<init>(Solver.java:29)
     TestSolver.testImmutableSolver(TestSolver.java:476)
     TestSolver.testImmutableSolverUnsolvableBoards(TestSolver.java:585)
     TestSolver.test7b(TestSolver.java:624)
     TestSolver.main(TestSolver.java:995)

     -  sequence of Solver operations was:
          Solver solver = new Solver(initial);
     -  failed on trial 1 of 10

==> FAILED

Test 8: Call moves() with more file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
     
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
         OperationCountLimitExceededException
         Number of calls to methods in Board exceeds limit: 100000000
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 9: Check whether equals() method in Board is called
        with an argument of the wrong type
  *  puzzle00.txt
  *  puzzle05.txt
  *  puzzle10.txt
  *  puzzle15.txt
==> passed

Test 10: Check that constructor throws exception if board is null
==> passed

Test 11: Check for fragile dependence on toString()
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle08.txt
  *  puzzle12.txt
==> passed

Test 12a: Call moves() with 2-by-2 file inputs
  *  puzzle2x2-00.txt
  *  puzzle2x2-01.txt
  *  puzzle2x2-02.txt
  *  puzzle2x2-03.txt
  *  puzzle2x2-04.txt
  *  puzzle2x2-05.txt
  *  puzzle2x2-06.txt
==> passed

Test 12b: Call solution() with 2-by-2 file inputs
  *  puzzle2x2-00.txt
  *  puzzle2x2-01.txt
  *  puzzle2x2-02.txt
  *  puzzle2x2-03.txt
  *  puzzle2x2-04.txt
  *  puzzle2x2-05.txt
  *  puzzle2x2-06.txt
==> passed

Test 13a: Call moves() with 3-by-3 file inputs
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-02.txt
  *  puzzle3x3-03.txt
  *  puzzle3x3-04.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-06.txt
  *  puzzle3x3-07.txt
  *  puzzle3x3-08.txt
  *  puzzle3x3-09.txt
  *  puzzle3x3-10.txt
  *  puzzle3x3-11.txt
  *  puzzle3x3-12.txt
  *  puzzle3x3-13.txt
  *  puzzle3x3-14.txt
  *  puzzle3x3-15.txt
  *  puzzle3x3-16.txt
  *  puzzle3x3-17.txt
  *  puzzle3x3-18.txt
  *  puzzle3x3-19.txt
  *  puzzle3x3-20.txt
  *  puzzle3x3-21.txt
  *  puzzle3x3-22.txt
  *  puzzle3x3-23.txt
  *  puzzle3x3-24.txt
  *  puzzle3x3-25.txt
  *  puzzle3x3-26.txt
  *  puzzle3x3-27.txt
     
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
         OperationCountLimitExceededException
         Number of calls to methods in Board exceeds limit: 100000000
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13b: Call solution() with 3-by-3 file inputs
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-02.txt
  *  puzzle3x3-03.txt
  *  puzzle3x3-04.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-06.txt
  *  puzzle3x3-07.txt
  *  puzzle3x3-08.txt
  *  puzzle3x3-09.txt
  *  puzzle3x3-10.txt
  *  puzzle3x3-11.txt
  *  puzzle3x3-12.txt
  *  puzzle3x3-13.txt
  *  puzzle3x3-14.txt
  *  puzzle3x3-15.txt
  *  puzzle3x3-16.txt
  *  puzzle3x3-17.txt
  *  puzzle3x3-18.txt
  *  puzzle3x3-19.txt
  *  puzzle3x3-20.txt
  *  puzzle3x3-21.txt
  *  puzzle3x3-22.txt
  *  puzzle3x3-23.txt
  *  puzzle3x3-24.txt
  *  puzzle3x3-25.txt
  *  puzzle3x3-26.txt
  *  puzzle3x3-27.txt
     
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
         OperationCountLimitExceededException
         Number of calls to methods in Board exceeds limit: 100000000
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14a: Call moves() with 4-by-4 file inputs
  *  puzzle4x4-00.txt
  *  puzzle4x4-01.txt
  *  puzzle4x4-02.txt
  *  puzzle4x4-03.txt
  *  puzzle4x4-04.txt
  *  puzzle4x4-05.txt
  *  puzzle4x4-06.txt
  *  puzzle4x4-07.txt
  *  puzzle4x4-08.txt
  *  puzzle4x4-09.txt
  *  puzzle4x4-10.txt
  *  puzzle4x4-11.txt
  *  puzzle4x4-12.txt
  *  puzzle4x4-13.txt
  *  puzzle4x4-14.txt
  *  puzzle4x4-15.txt
  *  puzzle4x4-16.txt
  *  puzzle4x4-17.txt
  *  puzzle4x4-18.txt
  *  puzzle4x4-19.txt
  *  puzzle4x4-20.txt
  *  puzzle4x4-21.txt
  *  puzzle4x4-22.txt
  *  puzzle4x4-23.txt
  *  puzzle4x4-24.txt
  *  puzzle4x4-25.txt
  *  puzzle4x4-26.txt
  *  puzzle4x4-27.txt
  *  puzzle4x4-28.txt
  *  puzzle4x4-29.txt
     
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
         OperationCountLimitExceededException
         Number of calls to methods in Board exceeds limit: 100000000
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14b: Call solution() with 4-by-4 file inputs
  *  puzzle4x4-00.txt
  *  puzzle4x4-01.txt
  *  puzzle4x4-02.txt
  *  puzzle4x4-03.txt
  *  puzzle4x4-04.txt
  *  puzzle4x4-05.txt
  *  puzzle4x4-06.txt
  *  puzzle4x4-07.txt
  *  puzzle4x4-08.txt
  *  puzzle4x4-09.txt
  *  puzzle4x4-10.txt
  *  puzzle4x4-11.txt
  *  puzzle4x4-12.txt
  *  puzzle4x4-13.txt
  *  puzzle4x4-14.txt
  *  puzzle4x4-15.txt
  *  puzzle4x4-16.txt
  *  puzzle4x4-17.txt
  *  puzzle4x4-18.txt
  *  puzzle4x4-19.txt
  *  puzzle4x4-20.txt
  *  puzzle4x4-21.txt
  *  puzzle4x4-22.txt
  *  puzzle4x4-23.txt
  *  puzzle4x4-24.txt
  *  puzzle4x4-25.txt
  *  puzzle4x4-26.txt
  *  puzzle4x4-27.txt
  *  puzzle4x4-28.txt
  *  puzzle4x4-29.txt
     
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
         OperationCountLimitExceededException
         Number of calls to methods in Board exceeds limit: 100000000
         ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 15: Call moves() with random solvable n-by-n boards
  *  100 random 2-by-2 boards
  *  200 random 3-by-3 boards that are <= 20 moves from goal
  *  200 random 4-by-4 boards that are <= 20 moves from goal
  *  200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 14/20 tests passed!


================================================================
******************************************************************************
*  MEMORY
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an n-by-n board

              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    36          6400                 6384
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 5416 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 1.11
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 6696 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 1.11
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 7976 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 1.11
==> passed


Total: 3/3 tests passed!

================================================================



******************************************************************************
*  TIMING
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java.
Maximum time allowed per puzzle is 10 seconds.

               filename   N    seconds    insert()            delMin()         max PQ size
---------------------------------------------------------------------------------------------
=> passed  puzzle20.txt   3     0.04       1009                 626                 384         
=> passed  puzzle21.txt   3     0.09       3490                2132                1359         
=> passed  puzzle22.txt   3     0.02       1784                1070                 715         
=> passed  puzzle23.txt   3     0.08       3462                2146                1317         
=> passed  puzzle24.txt   3     0.11       3929                2410                1520         
=> passed  puzzle25.txt   3     0.24       7434                4626                2809         
=> passed  puzzle26.txt   3     0.18       7150                4438                2713         
=> passed  puzzle27.txt   3     0.18       6901                4278                2624         
=> passed  puzzle28.txt   3     1.99      23117               14692                8426         
=> passed  puzzle29.txt   3     0.93      16275               10256                6020         
=> passed  puzzle30.txt   3     2.28      24578               15656                8923         
=> passed  puzzle31.txt   3     2.36      24684               15802                8884         
Aborting tests: puzzle34.txt took 156.92180916 seconds to complete.
==> 12/17 tests passed

Total: 12/17 tests passed!


================================================================
